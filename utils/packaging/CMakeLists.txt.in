# CMake setup for packaging

cmake_minimum_required(VERSION 3.10)

project(lvim C)

# GENERATE VERSION

# If not in a git repo (e.g., a tarball) these tokens define the complete
# version string, else they are combined with the result of `git describe`.
set(LVIM_VERSION_MAJOR 1)
set(LVIM_VERSION_MINOR 4)
set(LVIM_VERSION_PATCH 0)
set(LVIM_VERSION_PRERELEASE "-dev")

set(LVIM_VERSION "${LVIM_VERSION_MAJOR}.${LVIM_VERSION_MINOR}.${LVIM_VERSION_PATCH}${LVIM_VERSION_PRERELEASE}")

execute_process(
  COMMAND git --no-pager log --pretty=format:%h -1
  WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}"
  OUTPUT_VARIABLE COMMIT_SHA
  OUTPUT_STRIP_TRAILING_WHITESPACE
  RESULT_VARIABLE EXIT_CODE)

if(EXIT_CODE EQUAL 0 )
  if(LVIM_VERSION_PRERELEASE)
    set(LVIM_VERSION "${LVIM_VERSION}+${COMMIT_SHA}")
  endif()
endif()

file(WRITE "${CMAKE_BINARY_DIR}/version.txt" "${LVIM_VERSION}")

message(STATUS "Using LVIM_VERSION: ${LVIM_VERSION}")

# INSTALL

include(GNUInstallDirs)

# create and install lvim shim
if(PACKAGE_FOR_WINDOWS OR WIN32)
  set(LVIM_INPUT_BIN_NAME lvim.ps1)
  set(LVIM_BIN_NAME lvim.ps1)
  set(BASE_DIR_VAR "\$(Resolve-Path \"\$PSScriptRoot\\..\\${CMAKE_INSTALL_DATAROOTDIR}\\lunarvim\")")
else()
  set(LVIM_INPUT_BIN_NAME lvim.template)
  set(LVIM_BIN_NAME lvim)
  set(BASE_DIR_VAR "\$(readlink -f \"\$(dirname \"\$(realpath \"\$0\")\")/..\")/${CMAKE_INSTALL_DATAROOTDIR}/lunarvim")
endif()
set(NVIM_APPNAME_VAR "LVIM")
set(RUNTIME_DIR_VAR "\$XDG_DATA_HOME/lunarvim")
set(CONFIG_DIR_VAR "\$XDG_CONFIG_HOME/lvim")
set(CACHE_DIR_VAR "\$XDG_CACHE_HOME/lvim")

configure_file(${CMAKE_SOURCE_DIR}/utils/bin/${LVIM_INPUT_BIN_NAME} ${CMAKE_BINARY_DIR}/bin/${LVIM_BIN_NAME} @ONLY)
install(PROGRAMS ${CMAKE_BINARY_DIR}/bin/${LVIM_BIN_NAME} DESTINATION ${CMAKE_INSTALL_BINDIR})

# install the rest of the files
install(FILES ${CMAKE_SOURCE_DIR}/init.lua DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/lunarvim)
install(DIRECTORY 
  ${CMAKE_SOURCE_DIR}/lua
  ${CMAKE_SOURCE_DIR}/utils
  ${CMAKE_SOURCE_DIR}/snapshots 
  DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/lunarvim
  PATTERN "lua/lvim/utils/git.lua" EXCLUDE)

# install desktop file
if(CMAKE_SYSTEM_NAME STREQUAL "Linux")
  install(
    FILES ${CMAKE_SOURCE_DIR}/utils/desktop/lvim.desktop
    DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/applications)
  install(
    FILES ${CMAKE_SOURCE_DIR}/utils/desktop/48x48/lvim.svg
    DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/icons/hicolor/48x48/apps)
  install(
    FILES ${CMAKE_SOURCE_DIR}/utils/desktop/64x64/lvim.svg
    DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/icons/hicolor/scalable/apps)
  install(
    FILES ${CMAKE_SOURCE_DIR}/utils/desktop/64x64/lvim.svg
    DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/icons/hicolor/256x256/apps)
endif()

# bake the lvim version into the code
configure_file(${CMAKE_SOURCE_DIR}/lua/lvim/utils/git.lua ${CMAKE_BINARY_DIR}/git.lua @ONLY)
install(FILES 
  ${CMAKE_BINARY_DIR}/git.lua
  DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/lunarvim/lua/lvim/utils/)

# disable updater
configure_file(${CMAKE_SOURCE_DIR}/lua/lvim/bootstrap.lua ${CMAKE_BINARY_DIR}/bootstrap.lua @ONLY)
install(FILES 
  ${CMAKE_BINARY_DIR}/bootstrap.lua
  DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/lunarvim/lua/lvim)

option(BUNDLE_PLUGINS "Bundle core plugins during the build, requires nvim to be installed" OFF)
if(BUNDLE_PLUGINS)
  include(utils/packaging/cmake/BundlePlugins.cmake)
endif()

include(utils/packaging/cmake/Packaging.cmake)
